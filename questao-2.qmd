---
output: html_document
editor_options: 
  chunk_output_type: console
---
# Questão 2 {.unnumbered}

```{r}
#| echo: false

# Load libraries
pacman::p_load(quantmod, ggplot2, tidyr, dplyr)

# Set seed
set.seed(123)
```

## Aplicação ao modelo empírico

Trata-se de um modelo para avaliar o comportamento dos preços de fechamentos dos valores das ações do BBAS3 no ano de 2023. 

```{r}
# Define the stock symbol and specify the start and end dates
stock_symbol <- "BBAS3.SA"
start_date <- "2023-01-01"
end_date <- "2024-01-01"

# Use getSymbols to fetch historical stock data
getSymbols(stock_symbol,
    src = "yahoo",
    from = start_date,
    to = end_date
)

# Check the loaded data and get the closing values
stock_values <- as.vector(Cl(get(stock_symbol)))

# Summary statistics
summary(stock_values)
```

## a)

Obtendo o número de observações no vetor de valores da ação, é possível gerar simulações do movimento Browniano e do processo de Poisson (padrão e compensado) com a mesma quantidade de pontos que a base de dados. Considerando um intervalo de 0 a 1, em anos, é gerado um vetor $t$ relativo ao tempo decorrido do início da contagem ao momento de cada observação. 

Para simular o movimento Browniano, basta fazer a soma cumulativa de $n$ valores da distribuição Normal padrão. Para o processo de Poisson é feita a soma de valores da distribuição Poisson com parâmetro $\lambda=1$. Por fim, para o processo de Poisson compensado, é feita a soma de valores da distribuição Poisson com parâmetro $\lambda=1$ subtraídos de $\lambda t_{k} = t_{k}$, onde $t_{k}$ é o tempo decorrido do início da contagem ao momento de cada observação.

```{r}
n <- length(stock_values) - 1
t <- seq(0, 1, length.out = n + 1)
B <- c(0, cumsum(rnorm(n, mean = 0, sd = 1)))
N <- c(0, cumsum(rpois(n, lambda = 1)))
N_compensated <- c(0, cumsum(rpois(n, lambda = 1)) - seq(1, n, by = 1))
```

```{r}
data.frame(time = t, Browniano = B) |> 
    ggplot(aes(x = time, y = Browniano)) +
    geom_line(color = "lightblue") +
    labs(
        x = "Tempo",
        y = "Valor do movimento Browniano",
        title = "Simulação do movimento Browniano"
    ) +
    theme_minimal()
```


```{r}
data.frame(time = t, Poisson = N) |> 
    ggplot(aes(x = time, y = Poisson)) +
    geom_step(color = "darkred") +
    labs(
        x = "Tempo",
        y = "Valor do processo de Poisson",
        title = "Simulação do processo de Poisson"
    ) +
    theme_minimal()
```

```{r}
data.frame(time = t, Compensated = N_compensated) |> 
    ggplot(aes(x = time, y = Compensated)) +
    geom_step(color = "darkred") +
    labs(
        x = "Tempo",
        y = "Valor do processo de Poisson Compensado",
        title = "Simulação do processo de Poisson Compensado"
    ) +
    theme_minimal()
```

## b)

Em seguida, é criada uma função para prever a k-ésima observação do modelo, usando os tempos, o histórico do processo, o parâmetro $\theta$ e o valor do processo $\xi(t_{k})$

```{r}
simulate_Xtk <- function(t, X, theta, csi) {
    timeline <- as.vector(t)
    history <- as.vector(X)
    csi <- as.vector(csi)
    stop

    if (length(timeline) != length(history) ||
        length(timeline) != length(csi) ||
        length(history) != length(csi)) {
        stop("The timeline, the history and the csi vector must have the same length!")
    }

    n <- length(timeline)

    tj <- timeline[-1]
    tj_1 <- timeline[-n]
    Xtj_1 <- history[-n]
    fatork <- Xtj_1 * (tj - tj_1)
    sumk <- cumsum(fatork)
    Xtk <- Xtj_1 - theta * sumk + csi[-1]

    return(Xtk)
}
```

## c)

Para estimar o parâmetro $\theta$ por meio do método dos mínimos quadrados, é criada uma função que recebe os mesmos *inputs* da função de simulação, porém retornando a soma de quadrados do resíduo.

```{r}
least_squares <- function(t, X, theta, csi) {
    observed_values <- X[-1]
    predicted_values <- simulate_Xtk(t, X, theta, csi)

    return(sum((observed_values - predicted_values)^2))
}
```

Utilizando a função `optim`, e escolhendo um valor inicial inicial para $\theta$, é possível encontrar o ponto onde a soma de quadrados é mínima. Assim, são gerados os estimadores para cada o movimento Browniano e para o processo de Poisson.


```{r}
initial_theta <- 100

(estim_theta_browniano <- optim(
    par = initial_theta,
    fn = least_squares,
    X = stock_values,
    t = t,
    csi = B ## Trajetória do movimento Browniano
)$par)

(estim_theta_poisson <- optim(
    par = initial_theta,
    fn = least_squares,
    X = stock_values,
    t = t,
    csi = N ## Trajetória do processo de Poisson
)$par)

(estim_theta_poisson_compensated <- optim(
    par = initial_theta,
    fn = least_squares,
    X = stock_values,
    t = t,
    csi = N_compensated ## Trajetória do processo de Poisson
)$par)

```

## d)

Os testes dos resíduos são feitos a seguir. O que se percebe é que os resíduos gerados pelos três modelos não seguem uma distribuição normal, o que pode ser observado pelos valores-p do teste de Shapiro-Wilk e pelos gráficos de histograma e de quantis. 

Uma das possíveis razões pode ser a presença de autocorrelação nos resíduos, o que é confirmado pelo gráfico de autocorrelação. 

```{r}
X_prev_browniano <-
    simulate_Xtk(t, stock_values, estim_theta_browniano, B)
X_prev_poisson <-
    simulate_Xtk(t, stock_values, estim_theta_poisson, N)
X_prev_poisson_compensated <-
    simulate_Xtk(t, stock_values, estim_theta_poisson_compensated, N_compensated)

residuo_browniano <- stock_values[-1] - X_prev_browniano
shapiro.test(residuo_browniano)
hist(residuo_browniano)
qqnorm(residuo_browniano)
qqline(residuo_browniano)
acf(residuo_browniano)

residuo_poisson <- stock_values[-1] - X_prev_poisson
shapiro.test(residuo_poisson)
hist(residuo_poisson)
qqnorm(residuo_poisson)
qqline(residuo_poisson)
acf(residuo_poisson)


residuo_poisson_compensated <- stock_values[-1] - X_prev_poisson_compensated
shapiro.test(residuo_poisson_compensated)
hist(residuo_poisson_compensated)
qqnorm(residuo_poisson_compensated)
qqline(residuo_poisson_compensated)
acf(residuo_poisson_compensated)
```

## e)

Os modelos ajustados estão representados nos gráficos a seguir. Em todos eles, a série original está representada em vermelho. Visualmente, o modelo que melhor se ajusta aos dados é o modelo de movimento Browniano. Para testar isso, são realizados testes no item f.

```{r}
dados_mod <- data.frame(
    t = t[-1],
    X = stock_values[-1],
    X_prev_browniano = X_prev_browniano,
    X_prev_poisson = X_prev_poisson,
    X_prev_poisson_compensated = X_prev_poisson_compensated
)
dados_sim <- dados_mod |>
    pivot_longer(
        cols = c(X,
                 X_prev_browniano,
                 X_prev_poisson,
                 X_prev_poisson_compensated),
        names_to = "Variavel",
        values_to = "Valor"
    )
```


```{r}
dados_sim |>
    filter(Variavel %in% c("X", "X_prev_browniano")) |>
    ggplot() +
    geom_line(aes(x = t, y = Valor, color = Variavel)) +
    labs(
        x = "Tempo",
        y = "Valor das ações do BBAS3",
        color = NULL,
        title = "Ajuste do modelo de movimento Browniano
          aos dados de ações do BBAS3 em 2023"
    ) +
    theme_minimal()
```

```{r}
dados_sim |>
    filter(Variavel %in% c("X", "X_prev_poisson")) |>
    ggplot() +
    geom_line(aes(x = t, y = Valor, color = Variavel)) +
    labs(
        x = "Tempo",
        y = "Valor das ações do BBAS3",
        color = NULL,
        title = "Ajuste do modelo de processos de Poisson
          aos dados de ações do BBAS3 em 2023"
    ) +
    theme_minimal()
```


```{r}
dados_sim |>
    filter(Variavel %in% c("X", "X_prev_poisson_compensated")) |>
    ggplot() +
    geom_line(aes(x = t, y = Valor, color = Variavel)) +
    labs(
        x = "Tempo",
        y = "Valor das ações do BBAS3",
        color = NULL,
        title = "Ajuste do modelo de processos de Poisson Compensado
          aos dados de ações do BBAS3 em 2023"
    ) +
    theme_minimal()
```

## f) Definindo o melhor modelo


Para definir o melhor modelo, pode-se comparar as métricas mais comumento usadas: 

```{r}
mse_browniano <- mean(residuo_browniano**2)
modelo_browniano <- lm(data = dados_mod, X ~ X_prev_browniano)
r2_browniano <- summary(modelo_browniano)$r.squared
aic_browniano <- AIC(modelo_browniano)

mse_poisson <- mean(residuo_poisson**2)
modelo_poisson <- lm(data = dados_mod, X ~ X_prev_poisson)
r2_poisson <- summary(modelo_poisson)$r.squared
aic_poisson <- AIC(modelo_poisson)

mse_poisson_compensated <- mean(residuo_poisson_compensated**2)
modelo_poisson_compensated <- lm(
    data = dados_mod,
    X ~ X_prev_poisson_compensated
)
r2_poisson_compensated <- summary(modelo_poisson_compensated)$r.squared
aic_poisson_compensated <- AIC(modelo_poisson)
```


```{r}
resultados <- data.frame(
    Modelo = c("Movimento Browniano", "Processo de Poisson", "Processo de Poisson Compensado"),
    MSE = c(mse_browniano, mse_poisson, mse_poisson_compensated),
    R2 = c(r2_browniano, r2_poisson, r2_poisson_compensated),
    AIC = c(aic_browniano, aic_poisson, aic_poisson_compensated)
)

resultados
```

- **MSE**: o modelo com menor erro quadrático médio é o modelo de movimento Browniano.
- **R²**: o modelo com maior coeficiente de determinação é o modelo de movimento Browniano.
- **AIC**: o modelo com menor critério de informação de Akaike é o modelo de movimento Browniano.



## g) Previsão de valores de 2024

Primeiro, foram baixados os dados das ações entre os dias 1 e 15 de janeiro de 2024. Em seguida, foram geradas as previsões dos três modelos para esses dias.  

```{r}
# Define the stock symbol and specify the start and end dates
start_date_valid <- "2024-01-01"
end_date_valid <- "2024-01-15"

# Use getSymbols to fetch historical stock data
getSymbols(stock_symbol,
    src = "yahoo",
    from = start_date_valid,
    to = end_date_valid
)

# Check the loaded data and get the closing values
stock_values_valid <- as.vector(Cl(get(stock_symbol)))

# Summary statistics
summary(stock_values)
```


```{r}
n_valid <- length(stock_values_valid) - 1
t_valid <- seq(0, 1, length.out = n_valid + 1)
N_valid_browniano <- c(0, cumsum(rnorm(n_valid, mean = 0, sd = 1)))
N_valid_poisson <- c(0, cumsum(rpois(n_valid, 1)))
N_valid_poisson_compenstated <- c(0, cumsum(rpois(n_valid, 1)) -
    seq(1, n_valid, by = 1))
```


```{r}
X_prev_valid_browniano <- simulate_Xtk(
    t_valid,
    stock_values_valid,
    estim_theta_browniano,
    N_valid_browniano
)
X_prev_valid_poisson <- simulate_Xtk(
    t_valid,
    stock_values_valid,
    estim_theta_poisson,
    N_valid_poisson
)

X_prev_valid_poisson_compensated <-
    simulate_Xtk(
        t_valid,
        stock_values_valid,
        estim_theta_poisson_compensated,
        N_valid_poisson_compenstated
    )

dados_valid <- data.frame(
    t = t_valid[-1],
    X = stock_values_valid[-1],
    X_prev_valid_browniano = X_prev_valid_browniano,
    X_prev_valid_poisson = X_prev_valid_poisson,
    X_prev_valid_poisson_compensated = X_prev_valid_poisson_compensated
) |>
    pivot_longer(
        cols = c(
            X,
            X_prev_valid_browniano,
            X_prev_valid_poisson,
            X_prev_valid_poisson_compensated
        ),
        names_to = "Variavel",
        values_to = "Valor"
    )
```


As previsões geradas pelos três modelos são:

```{r}
dados_valid |>
    ggplot() +
    geom_line(aes(x = t, y = Valor, color = Variavel)) +
    labs(
        x = "Tempo",
        y = "Valor das ações do BBAS3",
        color = NULL,
        title = "Ajuste dos modelos aos dados
          de ações do BBAS3 nas primeiras semanas de 2024"
    ) +
    theme_minimal()
```


Como percebido pelo item anterior, o modelo que ajustou melhor os dados foi o modelo estimado pelo movimento Browniano, cujo gráfico pode ser visto a seguir:

```{r}
dados_valid |>
    filter(Variavel %in% c("X", "X_prev_valid_browniano")) |>
    ggplot() +
    geom_line(aes(x = t, y = Valor, color = Variavel)) +
    labs(
        x = "Tempo",
        y = "Valor das ações do BBAS3",
        color = NULL,
        title = "Ajuste do modelo do Movimento Browniano aos dados
          de ações do BBAS3 nas primeiras semanas de 2024"
    ) +
    theme_minimal()
```


Nessa linha, o movimento Browniano parece ter melhores propriedades para estimar e prever valores futuros das ações, marcadamente conhecidos por alta volatilidade e comportamentos não-lineares e não-sistemáticos.